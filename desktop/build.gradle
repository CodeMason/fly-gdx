import java.util.regex.Pattern

apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "de.fau.cs.mad.fly.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

def updateDesktopVersion() {
    def commitCount = 0
    def process = "git rev-list HEAD --count".execute()
	def commitText = process.text
	
	if (commitText) {
		commitCount = commitText.toInteger()

		def versionFile = file("DesktopVersion.txt")
		def pattern = Pattern.compile("version=(\\d+)\\.(\\d+)\\.(\\d+)")
		def manifestText = versionFile.getText()
		def matcher = pattern.matcher(manifestText)
		matcher.find()
		def majorVersion = Integer.parseInt(matcher.group(1))
		def minorVersion = Integer.parseInt(matcher.group(2))
		def buildVersion = Integer.parseInt(matcher.group(3))
		def nextVersionName = majorVersion + "." + minorVersion + "." + commitCount
		def content = matcher.replaceAll("version=" + nextVersionName)
		versionFile.write(content)
		println 'Desktop Version updated with ' + commitCount
	}
}

task run(dependsOn: classes, type: JavaExec) {
	updateDesktopVersion()
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}